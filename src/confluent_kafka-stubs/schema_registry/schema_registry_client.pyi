from enum import Enum
from types import TracebackType
from typing import Any, Self

class SchemaRegistryClient:
    def __init__(self, conf: dict[str, Any]) -> None: ...
    def __enter__(self) -> Self: ...
    def __exit__(
        self,
        exception_type: type[BaseException] | None,
        exception: BaseException | None,
        traceback: TracebackType | None,
    ) -> None: ...
    def config(self) -> dict[str, Any]: ...
    def register_schema(self, subject_name: str, schema: Schema, normalize_schemas: bool = False) -> int: ...
    def register_schema_full_response(
        self, subject_name: str, schema: Schema, normalize_schemas: bool = False
    ) -> RegisteredSchema: ...
    def get_schema(self, schema_id: int, subject_name: str | None = None, fmt: str | None = None) -> Schema: ...
    def lookup_schema(
        self, subject_name: str, schema: Schema, normalize_schemas: bool = False, deleted: bool = False
    ) -> RegisteredSchema: ...
    def get_subjects(self) -> list[str]: ...
    def delete_subject(self, subject_name: str, permanent: bool = False) -> list[int]: ...
    def get_latest_version(self, subject_name: str, fmt: str | None = None) -> RegisteredSchema: ...
    def get_latest_with_metadata(
        self, subject_name: str, metadata: dict[str, str], deleted: bool = False, fmt: str | None = None
    ) -> RegisteredSchema: ...
    def get_version(
        self, subject_name: str, version: int, deleted: bool = False, fmt: str | None = None
    ) -> RegisteredSchema: ...
    def get_versions(self, subject_name: str) -> list[int]: ...
    def delete_version(self, subject_name: str, version: int, permanent: bool = False) -> int: ...
    def set_compatibility(self, subject_name: str | None = None, level: str | None = None) -> str: ...
    def get_compatibility(self, subject_name: str | None = None) -> str: ...
    def test_compatibility(self, subject_name: str, schema: Schema, version: int | str = 'latest') -> bool: ...
    def set_config(self, subject_name: str | None = None, config: ServerConfig | None = None) -> ServerConfig: ...
    def get_config(self, subject_name: str | None = None) -> ServerConfig: ...
    def clear_latest_caches(self) -> None: ...
    def clear_caches(self) -> None: ...
    @staticmethod
    def new_client(conf: dict[str, Any]) -> SchemaRegistryClient: ...

class RuleKind(str, Enum):
    CONDITION = ...
    TRANSFORM = ...

class RuleMode(str, Enum):
    UPGRADE = ...
    DOWNGRADE = ...
    UPDOWN = ...
    READ = ...
    WRITE = ...
    WRITEREAD = ...

class RuleParams:
    params: dict[str, str] = ...

    def __init__(self, params: dict[str, str] = ...) -> None: ...
    def to_dict(self) -> dict[str, Any]: ...
    @classmethod
    def from_dict(cls, src_dict: dict[str, Any]) -> Self: ...

class Rule:
    name: str | None
    doc: str | None
    kind: RuleKind | None
    mode: RuleMode | None
    type: str | None
    tags: list[str] | None
    params: RuleParams | None
    expr: str | None
    on_success: str | None
    on_failure: str | None
    disabled: bool | None

    def __init__(
        self,
        name: str | None,
        doc: str | None,
        kind: RuleKind | None,
        mode: RuleMode | None,
        type: str | None,
        tags: list[str] | None,
        params: RuleParams | None,
        expr: str | None,
        on_success: str | None,
        on_failure: str | None,
        disabled: bool | None,
    ) -> None: ...
    def to_dict(self) -> dict[str, Any]: ...
    @classmethod
    def from_dict(cls, src_dict: dict[str, Any]) -> Self: ...

class RuleSet:
    migration_rules: list[Rule] | None
    domain_rules: list[Rule] | None

    def __init__(self, migration_rules: list[Rule] | None, domain_rules: list[Rule] | None) -> None: ...
    def to_dict(self) -> dict[str, Any]: ...
    @classmethod
    def from_dict(cls, src_dict: dict[str, Any]) -> Self: ...

class MetadataTags:
    tags: dict[str, list[str]] = ...

    def __init__(self, tags: dict[str, list[str]] = ...) -> None: ...
    def to_dict(self) -> dict[str, Any]: ...
    @classmethod
    def from_dict(cls, src_dict: dict[str, Any]) -> Self: ...

class MetadataProperties:
    properties: dict[str, str] = ...

    def __init__(self, properties: dict[str, str] = ...) -> None: ...
    def to_dict(self) -> dict[str, Any]: ...
    @classmethod
    def from_dict(cls, src_dict: dict[str, Any]) -> Self: ...

class Metadata:
    tags: MetadataTags | None
    properties: MetadataProperties | None
    sensitive: list[str] | None

    def __init__(
        self, tags: MetadataTags | None, properties: MetadataProperties | None, sensitive: list[str] | None
    ) -> None: ...
    def to_dict(self) -> dict[str, Any]: ...
    @classmethod
    def from_dict(cls, src_dict: dict[str, Any]) -> Self: ...

class SchemaReference:
    name: str | None
    subject: str | None
    version: int | None

    def __init__(self, name: str | None, subject: str | None, version: int | None) -> None: ...
    def to_dict(self) -> dict[str, Any]: ...
    @classmethod
    def from_dict(cls, src_dict: dict[str, Any]) -> Self: ...

class ConfigCompatibilityLevel(str, Enum):
    BACKWARD = ...
    BACKWARD_TRANSITIVE = ...
    FORWARD = ...
    FORWARD_TRANSITIVE = ...
    FULL = ...
    FULL_TRANSITIVE = ...
    NONE = ...

class ServerConfig:
    compatibility: ConfigCompatibilityLevel | None
    compatibility_level: ConfigCompatibilityLevel | None
    compatibility_group: str | None
    default_metadata: Metadata | None
    override_metadata: Metadata | None
    default_rule_set: RuleSet | None
    override_rule_set: RuleSet | None

    def __init__(
        self,
        compatibility: ConfigCompatibilityLevel | None = None,
        compatibility_level: ConfigCompatibilityLevel | None = None,
        compatibility_group: str | None = None,
        default_metadata: Metadata | None = None,
        override_metadata: Metadata | None = None,
        default_rule_set: RuleSet | None = None,
        override_rule_set: RuleSet | None = None,
    ) -> None: ...
    def to_dict(self) -> dict[str, Any]: ...
    @classmethod
    def from_dict(cls, src_dict: dict[str, Any]) -> Self: ...

class Schema:
    schema_str: str | None
    schema_type: str | None = ...
    references: list[SchemaReference] | None = ...
    metadata: Metadata | None = ...
    rule_set: RuleSet | None = ...

    def __init__(
        self,
        schema_str: str | None,
        schema_type: str | None = 'AVRO',
        references: list[SchemaReference] | None = ...,
        metadata: Metadata | None = None,
        rule_set: RuleSet | None = None,
    ) -> None: ...
    def to_dict(self) -> dict[str, Any]: ...
    @classmethod
    def from_dict(cls, src_dict: dict[str, Any]) -> Self: ...

class RegisteredSchema:
    schema_id: int | None
    schema: Schema | None
    subject: str | None
    version: int | None

    def __init__(
        self, schema_id: int | None, schema: Schema | None, subject: str | None, version: int | None
    ) -> None: ...
    def to_dict(self) -> dict[str, Any]: ...
    @classmethod
    def from_dict(cls, src_dict: dict[str, Any]) -> Self: ...
