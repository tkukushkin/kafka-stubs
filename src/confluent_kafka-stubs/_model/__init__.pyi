from enum import Enum

from confluent_kafka.cimpl import TopicPartition

class Node:
    id: int
    id_string: str
    host: str
    port: int
    rack: str | None

    def __init__(self, id: int, host: str, port: int, rack: str | None = None) -> None: ...

class ConsumerGroupTopicPartitions:
    group_id: str
    topic_partitions: list[TopicPartition] | None

    def __init__(self, group_id: str, topic_partitions: list[TopicPartition] | None = None) -> None: ...

class ConsumerGroupState(Enum):
    UNKNOWN = ...
    UNKOWN = ...
    PREPARING_REBALANCING = ...
    COMPLETING_REBALANCING = ...
    STABLE = ...
    DEAD = ...
    EMPTY = ...

    def __lt__(self, other: object) -> bool: ...

class ConsumerGroupType(Enum):
    UNKNOWN = ...
    CONSUMER = ...
    CLASSIC = ...

    def __lt__(self, other: object) -> bool: ...

class TopicCollection:
    topic_names: list[str]

    def __init__(self, topic_names: list[str]) -> None: ...

class TopicPartitionInfo:
    id: int
    leader: Node
    replicas: list[Node]
    isr: list[Node]

    def __init__(self, id: int, leader: Node, replicas: list[Node], isr: list[Node]) -> None: ...

class IsolationLevel(Enum):
    READ_UNCOMMITTED = ...
    READ_COMMITTED = ...

    def __lt__(self, other: object) -> bool: ...

class ElectionType(Enum):
    PREFERRED = ...
    UNCLEAN = ...

    def __lt__(self, other: object) -> bool: ...
